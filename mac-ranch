#!/bin/bash
#set -o xtrace
set -e

which docker >/dev/null 2>&1 || {
    echo "docker command not found." 1>&2
    exit 1
}

print_help()
{
    cat 1>&2 <<EOF
mac-ranch Usage:
    mac-ranch [opts]
    -c - Create world
    -d - Destroy world
    -h - Print this message
    -l - List hosts
    -b - boot2docker URL (default: the one for v1.11.2)
    -M - Host memory in mb (default: 512)
    -n - Number of hosts (default: 3)
    -s - Server Container (default: rancher/server:latest)
    -u - Registry mirror URL (default: none)
    -m - External mysql url (format mysql://user:pass@host:port/db)
    -w - Run server in specific docker network (default: default)
EOF
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BOOT2DOCKER="$DIR/boot2docker.iso" # Special image required for cross-host communication
AGENT_CONTAINER="rancher/agent:latest"
SERVER_CONTAINER="rancher/server:latest"
INSTANCE_COUNT=3
NODE_MACHINE_SIZE="512"
NODE_PREFIX="dm-host-"
MIRROR_URL=""
SERVER_NETWORK="default"

while getopts ":a:b:cdg:hlM:m:n:prs:u:w:" opt;do
    case $opt in
    a)
        AGENT_CONTAINER="${OPTARG}"
        ;;
    b)
        BOOT2DOCKER="${OPTARG}"
        ;;
    c)
        CREATE_NODES_FLAG="true"
        ;;
    d)
        DELETE_NODES_FLAG="true"
        ;;
    g)
        GRAPHITE_URL="${OPTARG}"
        ;;
    h)
        print_help
        exit 1
        ;;
    l)
        LIST_NODES_FLAG="true"
        ;;
    M)
        NODE_MACHINE_SIZE=${OPTARG}
        ;;
    m)
        MYSQL_URL="${OPTARG}"
        ;;
    n)
        INSTANCE_COUNT=${OPTARG}
        REGISTRATION_URL="true"
        ;;
    s)
        SERVER_CONTAINER="${OPTARG}"
        ;;
    u)
        MIRROR_URL="${OPTARG}"
        ;;
    w)
        SERVER_NETWORK="${OPTARG}"
        ;;
    \?)
        echo "Invalid arguemnts" >&2
        print_help
        exit 1
        ;;
    :)
        echo "Option -${OPTARG} requires arguement." >&2
        print_help
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

list_nodes()
{
    docker-machine ls | grep "^${NODE_PREFIX}"
}

list_node_names()
{
    (docker-machine ls -q | grep "^${NODE_PREFIX}") || echo -n ""
}

delete_nodes()
{
    local opts
    local nodes

    nodes=$(list_node_names)

    if docker inspect mac-ranch >/dev/null 2>&1; then
      docker rm -f mac-ranch
    fi

    if [[ "${nodes}" ]]; then
      docker-machine rm -y ${nodes}
    fi
}

get_master_ip()
{
    echo "10.0.2.2"
}

parse_url()
{
  proto="$(echo ${1} | grep :// | sed -e's,^\(.*://\).*,\1,g')"
  url="$(echo ${1##$proto})"
  proto="$(echo ${proto%://})"
  auth="$(echo $url | grep @ | cut -d@ -f1)"
  user="$(echo "$auth" | awk -F ':' '{ print $1 }')"
  pass="$(echo "$auth" | awk -F ':' '{ print $2 }')"
  host="$(echo ${url##$auth@} | cut -d/ -f1)"
  port="$(echo $host | cut -d':' -f2 | grep -E '^[0-9]+$')"
  host="$(echo $host | cut -d':' -f1)"
  db="$(echo $url | grep / | cut -d/ -f2-)"
  if [[ "$2" == "host" ]]; then echo ${host:-mysql}; fi
  if [[ "$2" == "port" ]]; then echo ${port:-3306}; fi
  if [[ "$2" == "db" ]]; then echo ${db:-rancher}; fi
  if [[ "$2" == "user" ]]; then echo ${user:-rancher}; fi
  if [[ "$2" == "pass" ]]; then echo ${pass:-rancher}; fi
}


create_reg_tokens() # Signature: rancher_server_ip
{
    project_id=$(curl -s -X GET http://localhost:8080/v1/projects|python -c'import json,sys;print(json.load(sys.stdin)["data"][0]["id"])')
    echo $(curl -s -X POST http://localhost:8080/v1/projects/${project_id}/registrationtokens|python -c'import json,sys; print(json.load(sys.stdin)["links"]["self"])')
}

get_reg_url()
{
    ## This is a bit hacky...
    local reg_tokens_link
    reg_tokens_link=$(create_reg_tokens)
    sleep 1
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["registrationUrl"])')
}

get_run_cmd()
{
    reg_tokens_link=$(create_reg_tokens)
    sleep 1
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["command"])')
}

build_master()
{

    agent=""
    if [[ ! -z "${AGENT_CONTAINER}" ]]; then
        agent="-e CATTLE_BOOTSTRAP_REQUIRED_IMAGE=${AGENT_CONTAINER}"
    fi

    docker_opts="-e VIRTUAL_HOST=rancher.docker -e VIRTUAL_PORT=8080"
    if [[ ! -z "$MYSQL_URL" ]]; then
        mysql_host=$(parse_url $MYSQL_URL host)
        if docker inspect $mysql_host &> /dev/null; then
            docker_opts="$docker_opts --link $mysql_host:$mysql_host "
        fi
        docker_opts="$docker_opts \
            -e CATTLE_DB_CATTLE_MYSQL_HOST=$(parse_url $MYSQL_URL host) \
            -e CATTLE_DB_CATTLE_MYSQL_PORT=$(parse_url $MYSQL_URL port) \
            -e CATTLE_DB_CATTLE_MYSQL_NAME=$(parse_url $MYSQL_URL db) \
            -e CATTLE_DB_CATTLE_USERNAME=$(parse_url $MYSQL_URL user) \
            -e CATTLE_DB_CATTLE_PASSWORD=$(parse_url $MYSQL_URL pass)"
    fi

    if [[ ! -z "$GRAPHITE_URL" ]]; then
        graphite_host=$(parse_url $GRAPHITE_URL host)
        if docker inspect $graphite_host &> /dev/null; then
            docker_opts="$docker_opts --link $graphite_host:$graphite_host "
        fi
        docker_opts="$docker_opts \
            -e CATTLE_GRAPHITE_HOST=$(parse_url $GRAPHITE_URL host) \
            -e CATTLE_GRAPHITE_PORT=$(parse_url $GRAPHITE_URL port)"
    fi

    docker run -d --restart=always --network $SERVER_NETWORK -p 8080:8080 --name=mac-ranch -e DEFAULT_CATTLE_API_HOST="$(get_master_ip):8080" $agent $docker_opts ${SERVER_CONTAINER}
}

build_compute()
{
    local name

    ip_cmd="\$(ifconfig eth1 | grep 'inet ' | awk -F'[: ]+' '{ print \$4 }')"
    registration_cmd="docker run -e CATTLE_AGENT_IP=\"${ip_cmd}\" $(echo $(get_run_cmd)|sed 's/^sudo docker run//')"
    echo "${registration_cmd}"

    mirror=""
    if [[ "${MIRROR_URL}" ]]; then
      mirror="--engine-registry-mirror=${MIRROR_URL}"
    fi

    offset=$(list_node_names|wc -l)
    for i in $(seq $((${offset} + 1)) $((${offset} + ${INSTANCE_COUNT}))); do
        name="${NODE_PREFIX}${i}"
        docker-machine create --driver=virtualbox --virtualbox-boot2docker-url="${BOOT2DOCKER}" --virtualbox-memory="${NODE_MACHINE_SIZE}" ${mirror} ${name}
        docker-machine ssh ${name} ${registration_cmd}
    done
}

build_cluster()
{
    if ! docker inspect mac-ranch; then
        build_master
        echo -n "Waiting for server to start "
        while sleep 5; do
            if [ "$(curl -s http://localhost:8080/ping)" = "pong" ]; then
                echo Success
                break
            fi
            echo -n "."
        done
    fi
    if [ "${INSTANCE_COUNT}" -gt "0" ]; then
        build_compute
    fi
}

main()
{
    if [[ "${LIST_NODES_FLAG}" = "true" ]]; then
        list_nodes
    elif [[ "${DELETE_NODES_FLAG}" = "true" ]]; then
        delete_nodes
    elif [[ "${CREATE_NODES_FLAG}" = "true" || "${REGISTRATION_URL}" ]]; then
        build_cluster
    else
        echo "Unable to take action" 1>&2
        print_help
        exit 1
    fi
}

main
